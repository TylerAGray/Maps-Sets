## **Quick Question #1**

What does the following code return?
// Create an array with duplicate elements
const array = [1, 1, 2, 2, 3, 4];

// Initialize an empty Set
const uniqueSet = new Set();

// Iterate over each element of the array
for (const element of array) {
    // Add each element to the Set
    uniqueSet.add(element);
}

// Output the resulting Set
console.log(uniqueSet); // Output: Set { 1, 2, 3, 4 }

## **Quick Question #2**

What does the following code return?
// Create a Set from the string "referee"
const uniqueSet = new Set("referee");

// Convert the Set to an array using the spread operator
const uniqueArray = [...uniqueSet];

// Join the elements of the array into a string
const result = uniqueArray.join("");

// Output the result
console.log(result); // Output: "refe"

## **Quick Questions #3**

What does the Map ***m*** look like after running the following code?
let m = new Map();
m.set([1,2,3], true);
m.set([1,2,3], false);

## **hasDuplicate**

Write a function called hasDuplicate which accepts an array and returns true or false if that array contains a duplicate
const hasDuplicate = arr => {
    // Create a Set from the array to remove duplicates
    const uniqueSet = new Set(arr);
    
    // If the size of the Set is not equal to the length of the array, it means there are duplicates
    return uniqueSet.size !== arr.length;
}

// Test cases
console.log(hasDuplicate([1,3,2,1]));   // true
console.log(hasDuplicate([1,5,-1,4]));  // false

## **vowelCount**

Write a function called vowelCount which accepts a string and returns a map where the keys are numbers and the values are the count of the vowels in the string.
vowelCount('awesome') // Map { 'a' => 1, 'e' => 2, 'o' => 1 }
vowelCount('Colt') // Map { 'o' => 1 }

function isVowel(char){
  return "aeiou".includes(char);
}

function vowelCount(str){
  const vowelMap = new Map();
  for(let char of str){
    let lowerCaseChar = char.toLowerCase()
    if(isVowel(lowerCaseChar)){
      if(vowelMap.has(lowerCaseChar)){
        vowelMap.set(lowerCaseChar, vowelMap.get(lowerCaseChar) + 1);
      } else {
        vowelMap.set(lowerCaseChar, 1);
      }
    }
  }
  return vowelMap;
}

